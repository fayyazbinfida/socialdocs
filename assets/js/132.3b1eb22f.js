(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{1515:function(n,t,e){"use strict";e.r(t);var a=e(31),o=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"buttons"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#buttons"}},[n._v("#")]),n._v(" Buttons")]),n._v(" "),e("p",[n._v("You can use buttons with each types:  "),e("code",[n._v("call")]),n._v(",  "),e("code",[n._v("url")]),n._v(", "),e("code",[n._v("node")]),n._v(".")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('{\n  "version": "v1",\n  "content": {\n    "messages": [\n      {\n        "type": "text",\n        "text": "simple text",\n        "buttons": [\n          {\n            "type": "url",\n            "caption": "External link",\n            "url": "https://uchat.com.au",\n          },\n          {\n            ...Another buttons\n          }\n        ]\n      },\n      {\n        ...Another messages\n      }\n    ],\n    "actions": [  //optional\n      {\n        "action": "add_tag",\n        "tag_name": "example tag"\n      },\n      {\n        ...Another actions\n      }\n    ],\n    "quick_replies": [ //optional\n      {\n        "type": "node",\n        "caption": "Quick reply text",\n        "target": "My Content"\n      },\n      {\n        ...Another quick replies\n      }\n    ]\n  }\n}\n\n')])])]),e("h2",{attrs:{id:"call-button"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call-button"}},[n._v("#")]),n._v(" Call button")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('{\n  "version": "v1",\n  "content": {\n    "messages": [\n      {\n        "type": "text",\n        "text": "simple text with button",\n        "buttons": [\n          {\n            "type": "call",\n            "caption": "Call me",\n            "phone": "+1 (555) 555-55-55"\n          }\n        ]\n      }\n    ],\n    "actions": [],\n    "quick_replies": []\n  }\n}\n\n')])])]),e("h2",{attrs:{id:"url-button"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#url-button"}},[n._v("#")]),n._v(" Url button")]),n._v(" "),e("p",[n._v("There are 3 options of  "),e("code",[n._v("webview_size")]),n._v(":")]),n._v(" "),e("p",[e("code",[n._v("full")]),n._v("  - (100%),")]),n._v(" "),e("p",[e("code",[n._v("medium")]),n._v("  - (75%),")]),n._v(" "),e("p",[e("code",[n._v("compact")]),n._v("  - (50%)")]),n._v(" "),e("p",[n._v("The  "),e("code",[n._v('"webview_size"')]),n._v("  property is optional.")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('{\n  "version": "v1",\n  "content": {\n    "messages": [\n      {\n        "type": "text",\n        "text": "simple text with button",\n        "buttons": [\n          {\n            "type": "url",\n            "caption": "External link",\n            "url": "https://uchat.com.au",\n            "webview_size": "full"\n          }\n        ]\n      }\n    ],\n    "actions": [],\n    "quick_replies": []\n  }\n}\n\n')])])]),e("h2",{attrs:{id:"go-to-node-button"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#go-to-node-button"}},[n._v("#")]),n._v(" Go to node button")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('{\n  "version": "v1",\n  "content": {\n    "messages": [\n      {\n        "type": "text",\n        "text": "simple text with button",\n        "buttons": [\n          {\n            "type": "node",\n            "caption": "Show",\n            "target": "My Content"\n          }\n        ]\n      }\n    ],\n    "actions": [],\n    "quick_replies": []\n  }\n}\n\n')])])]),e("p",[e("code",[n._v("target")]),n._v("  key should be linked to a node existing within executed flow. Node name can be found in its header, you need to use unique name for node connected with link. If there are multiple nodes with similar names inside of the same flow, transition behaviour would not meet expectations. Go to node buttons are not supported in Public API.")]),n._v(" "),e("h2",{attrs:{id:"dynamic-block-callback-button"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-block-callback-button"}},[n._v("#")]),n._v(" Dynamic block callback button")]),n._v(" "),e("p",[n._v("The  "),e("code",[n._v('"headers"')]),n._v(",  "),e("code",[n._v('"payload"')]),n._v("  properties are optional.")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('{\n  "version": "v1",\n  "content": {\n    "messages": [\n      {\n        "type": "text",\n        "text": "simple text with button",\n        "buttons": [\n          {\n            "type": "dynamic_block_callback",\n            "caption": "Dynamic content",\n            "url": "https://your-service.com/dynamic",\n            "method": "post",\n            "headers": {\n              "x-header": "value"\n            },\n            "payload": {\n              "key": "value"\n            }\n          }\n        ]\n      }\n    ],\n    "actions": [],\n    "quick_replies": []\n  }\n}\n\n')])])]),e("p",[e("code",[n._v("dynamic_block_callback")]),n._v("  works the same way as dynamic block in a content node, it will send a request to the server upon click, server reply will be sent to user. External server URL must be mentioned with HTTPS protocol.")])])}),[],!1,null,null,null);t.default=o.exports}}]);